// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/link/scheduler (interfaces: Scheduler)

// Package schedulermock is a generated GoMock package.
package schedulermock

import (
	context "context"
	reflect "reflect"

	api "github.com/Scalingo/link/api"
	models "github.com/Scalingo/link/models"
	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// CancelStopping mocks base method
func (m *MockScheduler) CancelStopping(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "CancelStopping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelStopping indicates an expected call of CancelStopping
func (mr *MockSchedulerMockRecorder) CancelStopping(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStopping", reflect.TypeOf((*MockScheduler)(nil).CancelStopping), arg0, arg1)
}

// ConfiguredIPs mocks base method
func (m *MockScheduler) ConfiguredIPs(arg0 context.Context) []api.IP {
	ret := m.ctrl.Call(m, "ConfiguredIPs", arg0)
	ret0, _ := ret[0].([]api.IP)
	return ret0
}

// ConfiguredIPs indicates an expected call of ConfiguredIPs
func (mr *MockSchedulerMockRecorder) ConfiguredIPs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfiguredIPs", reflect.TypeOf((*MockScheduler)(nil).ConfiguredIPs), arg0)
}

// GetIP mocks base method
func (m *MockScheduler) GetIP(arg0 context.Context, arg1 string) *api.IP {
	ret := m.ctrl.Call(m, "GetIP", arg0, arg1)
	ret0, _ := ret[0].(*api.IP)
	return ret0
}

// GetIP indicates an expected call of GetIP
func (mr *MockSchedulerMockRecorder) GetIP(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockScheduler)(nil).GetIP), arg0, arg1)
}

// Start mocks base method
func (m *MockScheduler) Start(arg0 context.Context, arg1 models.IP) error {
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockSchedulerMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler)(nil).Start), arg0, arg1)
}

// Status mocks base method
func (m *MockScheduler) Status(arg0 string) string {
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockSchedulerMockRecorder) Status(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockScheduler)(nil).Status), arg0)
}

// Stop mocks base method
func (m *MockScheduler) Stop(arg0 context.Context, arg1 string, arg2 func(context.Context) error) error {
	ret := m.ctrl.Call(m, "Stop", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockSchedulerMockRecorder) Stop(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockScheduler)(nil).Stop), arg0, arg1, arg2)
}

// TryGetLock mocks base method
func (m *MockScheduler) TryGetLock(arg0 context.Context, arg1 string) bool {
	ret := m.ctrl.Call(m, "TryGetLock", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryGetLock indicates an expected call of TryGetLock
func (mr *MockSchedulerMockRecorder) TryGetLock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryGetLock", reflect.TypeOf((*MockScheduler)(nil).TryGetLock), arg0, arg1)
}
